melee_attacker:
  root:
    comment: "Melee attacker"
    type: Root
    children:
      - type: Selector
        children:
          - comment: "Emergency exit if has teleport scroll"
            type: Sequence
            children:
              - type: HealthCondition
                params:
                  comparator: leq
                  value_percent: 30
              - type: HasItem
                params:
                  item_kind: teleport_scroll
              - type: UseItem
                params:
                  item_kind: teleport_scroll
          - comment: "Heal if has potion and not at full health"
            type: Sequence
            children:
              - type: HealthCondition
                params:
                  comparator: leq
                  value_percent: 80
              - type: HasItem
                params:
                  item_kind: health_potion
              - type: UseItem
                params:
                  item_kind: health_potion
          - type: Sequence
            children:
              # once alarmed the agent never calms down
              - comment: "Maybe set alarmed"
                type: Selector
                children:
                  # bc alarmed agents never calm down,
                  # we don't need to check this subtree once alarmed has been set to True once
                  - comment: "optimization: only run expensive siblings, more precisely line of sight, when not alarmed yet"
                    type: BlackboardCondition
                    params:
                      key: alarmed
                      comparator: has
                      value: "irrelevant"
                  - type: Sequence
                    children:
                      - type: DistanceToPlayer
                        params:
                          max_dist: 10
                      - type: SeesPlayer
                      - type: WriteToBlackboard
                        params:
                          key: alarmed
                          value: True
              - comment: "If alarmed"
                type: BlackboardCondition
                params:
                  key: alarmed
                  comparator: eq
                  value: True
              - comment: "Alarmed: attack if close enough, else move towards player"
                type: Selector
                children:
                  - comment: "Ranged attack if in range but not too close"
                    type: Sequence
                    children:
                      - type: DistanceToPlayer
                        params:
                          max_dist: 10
                          min_dist: 5
                      - type: SeesPlayer
                      - type: RangedAttack
                  - comment: "Melee if in close range"
                    type: Sequence
                    children:
                      - type: DistanceToPlayer
                        params:
                          max_dist: 1
                      - type: MeleeAttack
                  - type: MoveTowardsPlayer
## naive design
#example0:
#  type: Selector
#  children:
#    - type: Sequence
#      children:
#        - type: Condition
#          condition: blackboard.get('actor').is_alarmed
#        - type: Selector
#          children:
#            - type: Sequence
#              children:
#                - type: Condition
#                  condition: max_distance(blackboard.get('player'), blackboard.get('actor')) <= 1
#                - type: Action
#                  action: MeleeAttack
#                  params:
#                    target: blackboard.get('player')
#            - type: Sequence
#              children:
#                - type: Condition
#                  condition: blackboard.get('actor').inventory.has_ranged_weapon()
#                - type: Sequence
#                  children:
#                    - type: Condition
#                      condition: blackboard.get('actor').inventory.ranged_weapon_equipped()
#                    - type: Action
#                      action: SetBlackboard
#                      params:
#                        key: ranged_weapon_range
#                        value: actor.equipment.ranged_weapon_range
#                    - type: Condition
#                      condition: max_distance(player, actor) <= blackboard.get('ranged_weapon_range')
#                    - type: Action
#                      action: RangedAttack
#                      params:
#                        target: blackboard.get('player')
#            - type: Action
#              data:
#                action: move
#                params:
#                  towards: blackboard.get('player')
#    - type: Action
#      action: wait
#
#
#
#
#example1:
#  type: Selector
#  condition:
#    type: max_distance
#    parameters:
#      from: player.position
#      to: actor.position
#      max: 10
#  children:
#    - type: Sequence
#      children:
#        - type: Action
#          data:
#            action: move
#            parameters:
#              to: player.position
#        - type: Action
#          data:
#            action: melee
#            parameters:
#              target: player
#    - type: Condition
#      condition: below_ratio
#      parameters:
#        from: actor.fighter.hp
#        to: actor.fighter.max_hp
#        ratio: 0.5
#        children:
#          - type: Condition
#            condition:
#              type: has_item
#              parameters:
#                item: healing_potion
#            children:
#              - type: Action
#                data:
#                  action: use_item
#                  parameters:
#                    item: "healing_potion"
#
